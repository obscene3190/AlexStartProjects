#include <iostream>
#include <sstream>
#include <cmath>
#include <fstream>

using namespace std;

float** create(float** &matrix, unsigned int rows, unsigned int columns) {
    matrix = new float *[rows];
    for (unsigned int i = 0; i < rows; ++i) {
        matrix[i] = new float[columns];
        for (unsigned int j = 0; j < columns; ++j) {
            matrix[i][j] = 0.0f;
        }
    }
    return matrix;
}

bool read(float ** &matrix, unsigned int &rows, unsigned int &columns)
{
    bool result = true;
    char zap;
    string string, string1;
    getline(cin, string);
    istringstream stream(string);
    if (stream >> rows && stream >> zap && zap == ',' && stream >> columns) {
        result = true;
    }
    else return false;
    matrix = new float *[rows];
    for (unsigned int i = 0; i < rows; ++i) {
        matrix[i] = new float[columns];
        getline(cin, string1);
        istringstream stream(string1);
        for (unsigned int j = 0; j < columns; j++) {
            if (!(stream >> matrix[i][j])) {
                result = false;
                break;
            }
        }
    }
    return result;
}


void destroy(float ** elements, unsigned int rows)
{
    for (unsigned int i = 0; i < rows; ++i) {
        delete[] elements[i];
    }
    delete[] elements;
}

void write(ostream & stream, float ** elements, unsigned int rows, unsigned int columns) {
    stream << endl;
    for (unsigned int i = 0; i < rows; i++) {
        for (unsigned int j = 0; j < columns; j++) {
            if (elements[i][j] == -0) {
                stream << 0 << " ";
            }
            else {
                stream << elements[i][j] << " ";
            }
        }
        stream << endl;
    }
}

float ** add(float ** matrix1, float ** matrix2, float ** &matrix, unsigned int rows, unsigned int columns) {
    matrix = new float *[rows];
    for (unsigned int i = 0; i < rows; i++) {
        matrix[i] = new float[columns];
        for (unsigned int j = 0; j < columns; j++) {
            matrix[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
    return matrix;
}

float ** sub(float ** matrix1, float ** matrix2, float ** &matrix, unsigned int rows, unsigned int columns) {
    matrix = new float *[rows];
    for (unsigned int i = 0; i < rows; i++) {
        matrix[i] = new float[columns];
        for (unsigned int j = 0; j < columns; j++) {
            matrix[i][j] = matrix1[i][j] - matrix2[i][j];
        }
    }
    return matrix;
}


double determ(float** Arr, unsigned int size) {
    unsigned int i, j;
    double det = 0;
    float** matr;
    if (size == 1) {
        det = Arr[0][0];
    }
    else if (size == 2) {
        det = Arr[0][0] * Arr[1][1] - Arr[0][1] * Arr[1][0];
    }
    else {
        matr = new float*[size - 1];
        for (i = 0; i<size; ++i) {
            for (j = 0; j<size - 1; ++j) {
                if (j<i)
                    matr[j] = Arr[j];
                else
                    matr[j] = Arr[j + 1];
            }
            det += pow((double)-1, (i + j))*determ(matr, size - 1)*Arr[i][size - 1];
        }
        delete[] matr;
    }
    return det;
}

float ** mult(float ** matrix1, float ** matrix2, float ** &matrix, unsigned int rows, unsigned int columns) {
    matrix = new float *[rows];
    for (unsigned int i = 0; i < rows; i++) {
        matrix[i] = new float[columns];
        for (unsigned int j = 0; j < columns; j++) {
            float res = 0.0f;
            for (unsigned int k = 0; k< rows; k++) {
                res += matrix1[i][k] * matrix2[k][j];
                matrix[i][j] = res;
            }
        }
    }
    return matrix;
}

float ** trans(float ** matrix1, float ** &matrix, unsigned int rows, unsigned int columns) {
    matrix = new float *[columns];
    for (unsigned int i = 0; i < columns; i++) {
        matrix[i] = new float[rows];
        for (unsigned int j = 0; j < rows; j++) {
            matrix[i][j] = matrix1[j][i];
        }
    }
    return matrix;
}

float ** gauss(float ** &matrix, float ** matrix1, int rows) {
    if (determ(matrix1, rows) != 0) {
        float a, b, result;
        for (int i = 0; i < rows; i++) {
            matrix[i] = new float[rows];

            for (int j = 0; j < rows; j++) {
                matrix[i][j] = 0.0f;
                matrix[i][i] = 1.0f;
            }
        }
        for (int i = 0; i < rows; i++) {
            a = matrix1[i][i];
            for (int j = i + 1; j < rows; j++) {
                b = matrix1[j][i];
                for (int k = 0; k < rows; k++) {
                    matrix1[j][k] = matrix1[i][k] * b - matrix1[j][k] * a;
                    matrix[j][k] = matrix[i][k] * b - matrix[j][k] * a;
                }
            }
        }
        for (int i = 0; i < rows; i++) {
            for (int j = rows - 1; j > -1; j--) {
                result = 0.0f;
                for (int k = rows - 1; k > j; k--) {
                    result += matrix1[j][k] * matrix[k][i];
                    if (matrix1[j][j] == 0) {
                        for (i = 0; i < rows; i++) {
                            delete[] matrix[i];
                        }
                        delete[]matrix;
                    }
                }
                matrix[j][i] = (matrix[j][i] - result) / matrix1[j][j];
            }
        }
        return matrix;
    }
    else {
        cout << "There is no reverse matrix" << endl;
        exit(0);
    }
}
float** rewritefromfile(unsigned int &rows, unsigned int &columns, string FileName) {
    float** matrix = nullptr;
    char op;
    ifstream input;
    input.open(FileName.c_str());
    if ( !input.is_open() ) {
        string  string;
        getline(input,  string);
        istringstream stream( string);
        if (stream >> rows && stream >> op && op == ',' && stream >> columns) {
            matrix = create(matrix, rows, columns);
            for (unsigned int i = 0; i < rows; i++) {
                for (unsigned int j = 0; j < columns; j++) {
                    input >> matrix[i][j];
                }
            }
        }
    }
    else {
        cout << "Error";
        return nullptr;
    }
    input.close();
    return matrix;
}

bool readFileName(string &fileName) {
    bool result = true;
    string string;
    getline(cin, string);
    istringstream stream(string);
    if (!(stream >> fileName)) {
        result = !result;
    }
    return result;
}


int main() {
    unsigned int rows1 = 0, rows2 = 0, columns1 = 0, columns2 = 0;
    char op;
    string fileName1, fileName2;
    float ** matrix1 = new float *[rows1];
    float ** matrix;
    if (readFileName(fileName1)) {
        matrix1 = rewritefromfile(rows1, columns1, fileName1);
        cin >> op;
        if (op == 'T') {
            trans(matrix1, matrix, rows1, columns1);
            write(cout, matrix, columns1, rows1);
        }
        else if (rows1 == columns1 && (op == '-' || op == '+' || op == '*')) {
            if (readFileName(fileName2)) { 
                cin.get();
                float ** matrix2 = new float *[rows2];
                matrix2 = rewritefromfile(rows2, columns2, fileName2);
                if (rows1 == rows2 && columns1 == columns2) {
                    switch (op) {
                        case '+': {
                            add(matrix1, matrix2, matrix, rows1, columns1);
                            write(cout, matrix, rows1, columns1);
                            break;
                        }
                        case '-': {
                            sub(matrix1, matrix2, matrix, rows1, columns1);
                            write(cout, matrix, rows1, columns1);
                            break;
                        }
                        case '*': {
                            mult(matrix1, matrix2, matrix, rows1, columns1);
                            write(cout, matrix, rows1, columns1);
                            break;
                        }
                        default:
                        cout << "An error has occured while reading input data";
                    }
                destroy(matrix2, rows1);
                }
            }
            else cout << "An error has occured while reading input data";
        }
        else if (rows1 == columns1 && op == 'R') {
            float **matrixA = new float *[columns1];
            write(cout, gauss(matrixA, matrix1, rows1), rows1, columns1);
            destroy(matrixA, rows1);
        }
        else cout << "An error has occured while reading input data";
    }
    else cout << "An error has occured while reading input data";
    destroy(matrix1, rows1);
}
