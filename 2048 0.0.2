#include <iostream>
#include <sstream>
#include <cstdlib>
#include <ctime>
using namespace std;

int m = 0;

void add(int pole[4][4]) {
	int i = rand() % 4, j = rand() % 4, k = rand() % 10;
	if ((pole[i][j] == 0) && (k == 1)) pole[i][j] = 4;
	else if (pole[i][j] == 0) pole[i][j] = 2;
	else add(pole);
}

int sravnenie(int pole[4][4], int pole1[4][4]) {
	int res = 1;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (pole[i][j] != pole1[i][j]) { res *= 0; return res; }
			else res *= 1;
		}
	}
	return res;
}

void left(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 0;
		for (int i = 0; i<4; i++) { if (pole[j][i] != 0) { pole[j][n] = pole[j][i]; if (n != i) pole[j][i] = 0; n++; } }
		for (int i = 0; i<4; i++) {
			if ((pole[j][i] == pole[j][i + 1]) && (pole[j][i] != 0))
			{
				pole[j][i] += pole[j][i + 1]; pole[j][i + 1] = 0; m += pole[j][i];
			}
		}
		for (int i = 0; i<3; i++) { if (pole[j][i] == 0) { pole[j][i] = pole[j][i + 1]; pole[j][i + 1] = 0; } }
	}
}

void right(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 3;
		for (int i = 3; i>-1; i--) { if (pole[j][i] != 0) { pole[j][n] = pole[j][i]; if (n != i) pole[j][i] = 0; n--; } }
		for (int i = 3; i>-1; i--) {
			if ((pole[j][i] == pole[j][i - 1]) && (pole[j][i] != 0))
			{
				pole[j][i] += pole[j][i - 1]; pole[j][i - 1] = 0; m += pole[j][i];
			}
		}
		for (int i = 3; i>0; i--) { if (pole[j][i] == 0) { pole[j][i] = pole[j][i - 1]; pole[j][i - 1] = 0; } }
	}
}

void up(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 0;
		for (int i = 0; i<4; i++) { if (pole[i][j] != 0) { pole[n][j] = pole[i][j]; if (n != i) pole[i][j] = 0; n++; } }
		for (int i = 0; i<4; i++) {
			if ((pole[i][j] == pole[i + 1][j]) && (pole[i][j] != 0))
			{
				pole[i][j] += pole[i + 1][j]; pole[i + 1][j] = 0; m += pole[i][j];
			}
		}
		for (int i = 0; i<3; i++) { if (pole[i][j] == 0) { pole[i][j] = pole[i + 1][j]; pole[i + 1][j] = 0; } }
	}
}

void down(int pole[4][4]) {
	for (int j = 0; j<4; j++) {
		int n = 3;
		for (int i = 3; i>-1; i--) { if (pole[i][j] != 0) { pole[n][j] = pole[i][j]; if (n != i) pole[i][j] = 0; n--; } }
		for (int i = 3; i>-1; i--) {
			if ((pole[i][j] == pole[i - 1][j]) && (pole[i][j] != 0))
			{
				pole[i][j] += pole[i - 1][j]; pole[i - 1][j] = 0; m += pole[i][j];
			}
		}
		for (int i = 3; i>0; i--) { if (pole[i][j] == 0) { pole[i][j] = pole[i - 1][j]; pole[i - 1][j] = 0; } }
	}
}

void printpole(int pole[4][4]) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (pole[i][j] != 0) cout << pole[i][j] << " ";
			else cout << '*' << " ";
		}
		cout << endl;
	}
	cout << endl;
}

void perezapis(int pole1[4][4], int pole[4][4]) {
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			pole1[i][j] = pole[i][j];
}

int testend(int pole1[4][4], int pole[4][4]) {
	if (sravnenie(pole, pole1)) { cout << "No turns left. The End. Your result : " << m << endl; return -1; }
}

int main() {
	int pole[4][4] = { { 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } }, pole1[4][4] = { { 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 },{ 0,0,0,0 } };
	char znak;
	srand(time(NULL));
	add(pole);
	add(pole);
	printpole(pole);
	perezapis(pole1, pole);
	cout << "j - down; k - up; h - left; l - right q - quit" << endl << endl;
	for (; cin >> znak;) {
		switch (znak) {
		case 'j': { down(pole); add(pole); printpole(pole); cout << "Your result: " << m << endl; testend(pole1, pole);  break; }
		case 'k': { up(pole); add(pole); printpole(pole); cout << "Your result: " << m << endl; testend(pole1, pole);  break; }
		case 'l': { right(pole); add(pole); printpole(pole); cout << "Your result: " << m << endl; testend(pole1, pole);  break; }
		case'h': { left(pole); add(pole); printpole(pole); cout << "Your result: " << m << endl; testend(pole1, pole);  break; }
		case 'q': {cout << "End. Your result: " << m << endl; return -1; }
		default: { cout << "Incorrect simbol" << endl; break; }
		}
		printpole(pole1);
		perezapis(pole1, pole);
	}
}
